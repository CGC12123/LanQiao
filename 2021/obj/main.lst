C51 COMPILER V9.01   MAIN                                                                  04/05/2023 10:32:12 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\obj\main.obj
COMPILER INVOKED BY: D:\KEIL4 C51\C51\BIN\C51.EXE main.c BROWSE INCDIR(..\2021) DEBUG OBJECTEXTEND PRINT(.\obj\main.lst)
                    - OBJECT(.\obj\main.obj)

line level    source

   1          #include "STC15F2K60S2.h"
   2          #include "onewire.h"
   3          #include "absacc.h"
   4          #include "iic.h"
   5          
   6          typedef unsigned char u8;
   7          typedef unsigned int u16;
   8          
   9          // 以下为矩阵键盘定义
  10          sbit R1 = P3^0;
  11          sbit R2 = P3^1;
  12          sbit R3 = P3^2;
  13          sbit R4 = P3^3;
  14          
  15          sbit C4 = P3^4;
  16          sbit C3 = P3^5;
  17          sbit C2 = P4^2;
  18          sbit C1 = P4^4;
  19          
  20          
  21          u8 smg_nodot[] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82 , 0xF8, 0x80, 0x90, 0xff, 0xc6, 0x8c, 0x88}; //
             - c p a  0110 0011
  22          u8 smg_dot[] = {0x40, 0x79, 0x24, 0x30, 0x19, 0x12, 0x02, 0x78, 0x00, 0x10, 0xff};
  23          
  24          u16 temp = 0;
  25          u8 key_mutil = 0;
  26          u8 param_tem = 25;
  27          u8 paper = 1;
  28          bit mode = 0;
  29          float Vdac;
  30          
  31          void display_temp();
  32          
  33          void delay(u8 time)
  34          {
  35   1              while(time --);
  36   1      }
  37          
  38          void Delay_OneWire_(u8 time)
  39          {
  40   1              while(time --)
  41   1              {
  42   2                      display_temp(); 
  43   2              }
  44   1      }
  45          
  46          void selete_hc138(u8 num)
  47          {
  48   1              switch(num)
  49   1              {
  50   2                      case 4:
  51   2                              P2 = (P2 & 0x1f) | 0x80; // 0001 1111
  52   2                      break; 
  53   2                      case 5:
C51 COMPILER V9.01   MAIN                                                                  04/05/2023 10:32:12 PAGE 2   

  54   2                              P2 = (P2 & 0x1f) | 0xa0;
  55   2                      break;
  56   2                      case 6:
  57   2                              P2 = (P2 & 0x1f) | 0xc0;
  58   2                      break;
  59   2                      case 7:
  60   2                              P2 = (P2 & 0x1f) | 0xe0;
  61   2                      break;
  62   2              }       
  63   1      }
  64          
  65          void display_smg_bit(u8 pos, u8 num)
  66          {
  67   1              selete_hc138(7);
  68   1              P0 = 0xff;
  69   1              selete_hc138(6);
  70   1              P0 = 0x01 << pos;
  71   1              selete_hc138(7);
  72   1              P0 = num;
  73   1      }
  74          
  75          void rd_ds18b20()
  76          {
  77   1              u8 LSB, MSB;
  78   1              
  79   1              init_ds18b20();
  80   1              Write_DS18B20(0xcc);
  81   1              Write_DS18B20(0x44);
  82   1      
  83   1              //Delay_OneWire_(1000);
  84   1      
  85   1              init_ds18b20();
  86   1              Write_DS18B20(0xcc);
  87   1              Write_DS18B20(0xbe);
  88   1      
  89   1              LSB = Read_DS18B20(); // 低八位
  90   1              MSB = Read_DS18B20(); // 高八位
  91   1      
  92   1              temp = MSB;
  93   1              temp = (temp << 8) | LSB;
  94   1      
  95   1              //if(temp & 0xf800 == 0x0000) // 判断高五位（符号位）此处为判断正数
  96   1              //{
  97   1                      temp >>= 4;
  98   1                      //temp *= 100; // 放大100倍
  99   1                      //temp = temp + (LSB & 0x0f) * 6.25; // 得到原温度的100倍       
 100   1                      temp = temp *0.0625;
 101   1                      temp = temp * 10;                                                                                                               
 102   1              //}
 103   1      }
 104          
 105          void display_smg_all(unsigned char dat)
 106          {
 107   1              XBYTE[0xc000] = 0xff;                                                    
 108   1              XBYTE[0xe000] = dat;    
 109   1      }
 110          
 111          
 112          void scan_key()
 113          {
 114   1              R1 = 0;
 115   1              R2 = R3 = R4 = 1;
C51 COMPILER V9.01   MAIN                                                                  04/05/2023 10:32:12 PAGE 3   

 116   1              C1 = C2 = C3 = 1;
 117   1              if(C1 == 0)
 118   1              {
 119   2                      delay(500);
 120   2                      while(C1 == 0);
 121   2                      key_mutil = 7; 
 122   2              }
 123   1              if(C2 == 0)
 124   1              {
 125   2                      delay(500);
 126   2                      while(C2 == 0);
 127   2                      key_mutil = 11; 
 128   2              }
 129   1              if(C3 == 0)
 130   1              {
 131   2                      delay(500);
 132   2                      while(C3 == 0);
 133   2                      key_mutil = 15; 
 134   2              }
 135   1              if(C4 == 0)
 136   1              {
 137   2                      delay(500);
 138   2                      while(C4 == 0);
 139   2                      key_mutil = 19; 
 140   2              }
 141   1      
 142   1              R2 = 0;
 143   1              R1 = R3 = R4 = 1;
 144   1              C1 = C2 = C3 = 1;
 145   1              if(C1 == 0)
 146   1              {
 147   2                      delay(500);
 148   2                      while(C1 == 0);
 149   2                      key_mutil = 6; 
 150   2              }
 151   1              if(C2 == 0)
 152   1              {
 153   2                      delay(500);
 154   2                      while(C2 == 0);
 155   2                      key_mutil = 10; 
 156   2              }
 157   1              if(C3 == 0)
 158   1              {
 159   2                      delay(500);
 160   2                      while(C3 == 0);
 161   2                      key_mutil = 14; 
 162   2              }
 163   1              if(C4 == 0)
 164   1              {
 165   2                      delay(500);
 166   2                      while(C4 == 0);
 167   2                      key_mutil = 18; 
 168   2              }
 169   1      
 170   1              R3 = 0;
 171   1              R1 = R2 = R4 = 1;
 172   1              C1 = C2 = C3 = 1;
 173   1              if(C1 == 0)
 174   1              {
 175   2                      delay(500);
 176   2                      while(C1 == 0);
 177   2                      key_mutil = 5; 
C51 COMPILER V9.01   MAIN                                                                  04/05/2023 10:32:12 PAGE 4   

 178   2              }
 179   1              if(C2 == 0)
 180   1              {
 181   2                      delay(500);
 182   2                      while(C2 == 0);
 183   2                      key_mutil = 9; 
 184   2              }
 185   1              if(C3 == 0)
 186   1              {
 187   2                      delay(500);
 188   2                      while(C3 == 0);
 189   2                      key_mutil = 13; 
 190   2              }
 191   1              if(C4 == 0)
 192   1              {
 193   2                      delay(500);
 194   2                      while(C4 == 0);
 195   2                      key_mutil = 17; 
 196   2              }
 197   1      
 198   1              R4 = 0;
 199   1              R1 = R2 = R3 = 1;
 200   1              C1 = C2 = C3 = 1;
 201   1              if(C1 == 0)
 202   1              {
 203   2                      delay(500);
 204   2                      while(C1 == 0);
 205   2                      key_mutil = 4; 
 206   2              }
 207   1              if(C2 == 0)
 208   1              {
 209   2                      delay(500);
 210   2                      while(C2 == 0);
 211   2                      key_mutil = 8; 
 212   2              }
 213   1              if(C3 == 0)
 214   1              {
 215   2                      delay(500);
 216   2                      while(C3 == 0);
 217   2                      key_mutil = 12; 
 218   2              }
 219   1              if(C4 == 0)
 220   1              {
 221   2                      delay(500);
 222   2                      while(C4 == 0);
 223   2                      key_mutil = 16; 
 224   2              }                                                               
 225   1      }
 226          
 227          void display_temp() // 温度显示页面
 228          {
 229   1      //      display_smg_bit(7, smg_nodot[temp % 10]);
 230   1      //      delay(50);
 231   1      //      display_smg_bit(6, smg_nodot[temp % 100 / 10]);
 232   1      //      delay(50);
 233   1      //      display_smg_bit(5, smg_dot[temp % 1000 / 100]);
 234   1      //      delay(50);
 235   1      //      display_smg_bit(4, smg_nodot[temp / 1000]);
 236   1              display_smg_bit(7, smg_nodot[temp % 10]);
 237   1              delay(200);
 238   1              display_smg_bit(7, 0xff);
 239   1              delay(200);
C51 COMPILER V9.01   MAIN                                                                  04/05/2023 10:32:12 PAGE 5   

 240   1              display_smg_bit(6, smg_dot[temp /10 % 10 ]);
 241   1              delay(5200);
 242   1              display_smg_bit(6, 0xff);
 243   1              delay(200);
 244   1              display_smg_bit(5, smg_nodot[temp / 100]);
 245   1              delay(200);
 246   1              display_smg_bit(5, 0xff);
 247   1              delay(200);
 248   1      
 249   1              display_smg_bit(4, 0xff);
 250   1              delay(200);     
 251   1              display_smg_bit(3, 0xff);
 252   1              delay(200);
 253   1              display_smg_bit(2, 0xff);
 254   1              delay(200);
 255   1              display_smg_bit(1, 0xff);
 256   1              delay(200);
 257   1              display_smg_bit(0, smg_nodot[11]); // c
 258   1              delay(200);
 259   1      
 260   1              //display_smg_all(0xff); // 消影        
 261   1      }
 262          
 263          void param_set()
 264          {
 265   1              if (key_mutil == 8)
 266   1              {
 267   2                      param_tem --;
 268   2                      key_mutil = 0;
 269   2              }
 270   1              else if(key_mutil == 9)
 271   1              {
 272   2                      param_tem ++;
 273   2                      key_mutil = 0;          
 274   2              }
 275   1      }
 276          
 277          void display_param() // 参数显示页面
 278          {
 279   1              display_smg_bit(7, smg_nodot[param_tem % 10]);
 280   1              delay(50);
 281   1              display_smg_bit(6, smg_nodot[param_tem / 10]);
 282   1              delay(50);
 283   1              display_smg_bit(5, 0xff);
 284   1              delay(50);
 285   1              display_smg_bit(4, 0xff);
 286   1              delay(50);
 287   1              display_smg_bit(3, 0xff);
 288   1              delay(50);
 289   1              display_smg_bit(2, 0xff);
 290   1              delay(50);
 291   1              display_smg_bit(1, 0xff);
 292   1              delay(50);
 293   1              display_smg_bit(0, smg_nodot[12]); // p
 294   1              delay(50);              
 295   1      }
 296          
 297          void dac_pcf8591(u8 dat)
 298          {
 299   1              IIC_Start();
 300   1              IIC_SendByte(0x90);
 301   1              IIC_WaitAck();
C51 COMPILER V9.01   MAIN                                                                  04/05/2023 10:32:12 PAGE 6   

 302   1      
 303   1              IIC_SendByte(0x40);  // DAC输出模式  允许DAC   ADC 通道 0
 304   1              IIC_WaitAck();
 305   1      
 306   1              IIC_SendByte(dat);
 307   1              IIC_WaitAck();
 308   1              IIC_Stop();
 309   1      }
 310          
 311          void dac_change_mode()
 312          {
 313   1              if (key_mutil == 5)
 314   1              {       
 315   2                      mode = !mode;
 316   2                      key_mutil = 0;
 317   2              }
 318   1              if (mode == 0) // 模式1
 319   1              {
 320   2                      if(temp < param_tem * 100)
 321   2                              Vdac = 0.0;
 322   2                      else
 323   2                              Vdac = 5.0;     
 324   2              }
 325   1              else if(mode == 1) // 模式2
 326   1              {
 327   2                      if(temp < 20 * 100)
 328   2                              Vdac = 1.0;
 329   2                      else if(temp > 40 * 100)
 330   2                              Vdac = 4.0;
 331   2                      else
 332   2                              Vdac = 0.15 * temp / 100 - 2;
 333   2              }
 334   1              dac_pcf8591((u8)(Vdac * 51));
 335   1      }
 336          
 337          void display_dac()
 338          {
 339   1              u8 x = (u8) Vdac * 100;
 340   1              display_smg_bit(0, smg_nodot[13]);
 341   1              delay(50);
 342   1              display_smg_bit(1, 0xff);
 343   1              delay(50);
 344   1              display_smg_bit(2, 0xff);
 345   1              delay(50);
 346   1              display_smg_bit(3, 0xff);
 347   1              delay(50);
 348   1              display_smg_bit(4, 0xff);
 349   1              delay(50);
 350   1              display_smg_bit(5, 0xff);
 351   1              delay(50);
 352   1              display_smg_bit(6, smg_dot[x / 100 % 10]);
 353   1              delay(50);
 354   1              display_smg_bit(7, smg_nodot[x / 10 % 10]);
 355   1              delay(50);
 356   1              display_smg_bit(8, smg_nodot[x % 10, 0]);
 357   1              delay(50);
 358   1      }
 359          
 360          void main()
 361          {
 362   1              //XBYTE[8000] = 0xff; // 关灯
 363   1              
C51 COMPILER V9.01   MAIN                                                                  04/05/2023 10:32:12 PAGE 7   

 364   1              selete_hc138(4);
 365   1              P0 = 0xff;
 366   1              
 367   1      //      display_smg_bit(0, 0xc6);
 368   1      //      delay(100);
 369   1      //      display_smg_bit(1, 0x88);
 370   1      //      delay(100);
 371   1              while(1)
 372   1              {               
 373   2                      
 374   2                      rd_ds18b20();
 375   2                      display_temp();         
 376   2      
 377   2      //              scan_key();
 378   2      //              
 379   2      //              if (key_mutil == 4)
 380   2      //              {
 381   2      //                      paper ++;
 382   2      //                      key_mutil = 0;
 383   2      //                      if (paper == 4)
 384   2      //                              paper = 1;
 385   2      //              }
 386   2      //
 387   2      //              //paper
 388   2      //              if (paper == 1)
 389   2      //              {       
 390   2      //                      rd_ds18b20();
 391   2      //                      display_temp();
 392   2      //                      selete_hc138(4);
 393   2      //                      P0 = ~(0x40);
 394   2      //              }
 395   2      //              else if(paper == 2)
 396   2      //              {
 397   2      //                      display_param();
 398   2      //                      param_set();
 399   2      //                      selete_hc138(4);
 400   2      //                      P0 = ~(0x20);   
 401   2      //              }
 402   2      //              else if(paper == 3)
 403   2      //              {
 404   2      //                      rd_ds18b20();
 405   2      //                      dac_change_mode();
 406   2      //                      display_dac();  
 407   2      //              }                       
 408   2              }
 409   1              
 410   1      }
 411          
 412          
 413          
 414          
 415          
 416          
 417          
 418          
 419          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1086    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
C51 COMPILER V9.01   MAIN                                                                  04/05/2023 10:32:12 PAGE 8   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =     34       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
